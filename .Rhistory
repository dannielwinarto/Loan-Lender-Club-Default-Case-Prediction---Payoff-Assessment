sdev = NULL
for(i in 1:ncol(x)){
sdev[i] = sd(x[,i],na.rm = removeNA)
means[i] = mean(x[,i], na.rm = removeNA)
}
return(data.frame(average = means,stdev = sdev))
}
summarise(df, T)
summarise(df)
summarise(df, F)
df
summarise =  function(x, removeNA = T){
means = NULL
sdev = NULL
for(i in 1:ncol(x)){
sdev[i] = sd(x[,i],na.rm = removeNA)
means[i] = mean(x[,i], na.rm = removeNA)
}
return(data.frame(average = means,stdev = sdev))
}
summarise(df, F)
summarise(df, F)
summarise(df)
library(maps)
library(ggplot2)
install.packages("maps")
library(maps)
library(ggplot2)
states_map = map_data("state")
states_map
library(maps)
library(ggplot2)
states_map = map_data("state")
states_map
glimpse(states_map)
library(dplyr)
glimpse(states_map)
library(dplyr)
states_map %>% filter(subregion == "hawaii")
levels(states_map$subregion)
states_map$subregion
states_map
glimpse(states_map)
levels(states_map$region)
states_map$region
level(states_map$region)
levels(states_map$region)
table(states_map$region)
levels(as.factor(states_map$region))
states_map %>% filter(subregion == "texas")
states_map %>% filter(subregion ==  "missouri")
a = states_map %>% filter(subregion ==  "missouri")
glimpse(states_map)
a = states_map %>% filter(region ==  "missouri")
a
library(dplyr)
states_map = map_data("state")
states_map = map_data("country")
states_map = map_data("state")
?map_data
glimpse(states_map)
ggplot(states_map, aes(x = long, y = lat)) + geom_point()
ggplot(states_map, aes(x = long, y = lat)) +
geom_point()
geom_polygon()
ggplot(states_map, aes(x = long, y = lat)) +
geom_polygon()
ggplot(states_map, aes(x = long, y = lat, group = group)) +
geom_polygon()
geom_polygon( fill = "green")
ggplot(states_map, aes(x = long, y = lat, group = group)) +
geom_polygon( fill = "green")
ggplot(states_map, aes(x = long, y = lat, group = group)) +
geom_polygon( fill = "white", color = "black")
ggplot(states_map, aes(x = long, y = lat)) +
geom_line()
ggplot(states_map, aes(x = long, y = lat)) +
geom_point()
ggplot(states_map, aes(x = long, y = lat)) +
geom_point()
ggplot(states_map, aes(x = long, y = lat, group = group)) +
geom_polygon( fill = "white", color = "black")
world_map = map_data("world")
ggplot(world_map, aes(x = long, y = lat)) +
geom_point()
ggplot(world_map, aes(x = long, y = lat, group = group)) +
geom_polygon( fill = "white", color = "black")
lebanon = map_data("world")
lebanon = map_data("world", region  = "Lebanon")
lebanon
ggplot(lebanon, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "white", color = "black")
lebanon = map_data("world", region  = "Indonesia")
lebanon
ggplot(lebanon, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "white", color = "black")
lebanon = map_data("world", region  = "Lebanon")
ggplot(lebanon, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "white", color = "black")
far_east = map_data("world", region  = c("Japan", "China", "North Korea", "South Korea")
ggplot(far_east, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "white", color = "black")
far_east = map_data("world", region  = c("Japan", "China", "North Korea", "South Korea")
far_east = map_data("world", region  = c("Japan", "China", "North Korea", "South Korea"))
far_east = map_data("world", region  =
c("Japan", "China"))
far_east = map_data("world", region  =
c("Japan", "China", "North Korea"))
ggplot(far_east, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "white", color = "black")
far_east = map_data("world", region  =
c("Japan", "China", "North Korea", "South Korea"))
far_east = map_data("world", region  =
c("Japan", "China", "North Korea", "South Korea"))
ggplot(far_east, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "white", color = "black")
countries = world_map$region
countries
world_map = map_data("world")
countries = world_map %>% distinct(region)
countries
countries = world_map %>% distinct(region) %>% arrange(region)
countries
countries
USAccDeaths
?USAccDeaths
head(USArrests)
head(?USArrests)
?USArrests
head(USArrests)
summary(USArrests)
ncol(USArrests)
head(USArrests)
ncol(USArrests)
ncol(USArrests)[1]
ncol(USArrests)[2]
colnames(USArrests)[2]
colnames(USArrests)[1]
colnames(USArrests)[5]
colnames(USArrests)[5]  =
colnames(USArrests)[5]
colnames(USArrests)[5]
colnames(USArrests)[5]  = "State"
rownames(USArrests)
USArrests%State = rownames(USArrests)
USArrests$State = rownames(USArrests)
head(USArrests)
head(USArrests)
crimes = USArrests
crime$State = rownames(USArrests)
crimes$State = rownames(USArrests)
crimes
ggplot(crimes, aes(x = states,)) + geom_polygon()
ggplot(crimes, aes(x = states)) + geom_polygon()
# Create maps for the usa and the world
library(maps)
library(ggplot2)
# the maps package has information about countries state, counties etc
states_map = map_data("state")
library(dplyr)
glimpse(states_map)
# levels(as.factor(states_map$region))
# a = states_map %>% filter(region ==  "missouri")
states_map = map_data("state")
ggplot(states_map, aes(x = long, y = lat)) +
geom_point()
ggplot(states_map, aes(x = long, y = lat, group = group)) +
geom_polygon( fill = "white", color = "black")
# map of the world
world_map = map_data("world")
ggplot(world_map, aes(x = long, y = lat)) +
geom_point()
ggplot(world_map, aes(x = long, y = lat, group = group)) +
geom_polygon( fill = "white", color = "black")
# the map_data function can take the following
# world, nz, france, italy, usa, state, county
# get the map for lebanon
lebanon = map_data("world", region  = "Lebanon")
ggplot(lebanon, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "white", color = "black")
# get the map for far east
far_east = map_data("world", region  =
c("Japan", "China", "North Korea", "South Korea"))
ggplot(far_east, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "white", color = "black")
# get all country names
world_map = map_data("world")
countries = world_map %>% distinct(region) %>% arrange(region)
states_map = map_data("state")
View(states_map)
View(states_map)
View(crimes)
View(crimes)
crimes_map = merge(states_map, crime, by.x = region, by.y = states)
crimes_map = merge(states_map, crimes, by.x = region, by.y = states)
crimes_map = merge(states_map, #first dataframe
crimes, #2nd dataframe
by.x = "region", #key for first dataframe
by.y = "states") #key for 2nd dataframe
crimes_map = merge(states_map, #first dataframe
crimes, #2nd dataframe
by.x = "region", #key for first dataframe
by.y = "states") #key for 2nd dataframe
crimes_map = merge(states_map, #first dataframe
crimes, #2nd dataframe
by.x = "region", #key for first dataframe
by.y = "States") #key for 2nd dataframe
crimes
head(USArrests)
crimes = USArrests
crimes
crimes$State = rownames(USArrests)
crimes$State
crimes
tolower(crimes$State)
crimes$State = tolower(crimes$State)
crimes
crimes_map = merge(states_map, #first dataframe
crimes, #2nd dataframe
by.x = "region", #key for first dataframe
by.y = "States") #key for 2nd dataframe
crimes_map = merge(states_map, #first dataframe
crimes, #2nd dataframe
by.x = "region", #key for first dataframe
by.y = "State") #key for 2nd dataframe
glimpse(crimes_map)
crimes
glimpse(crimes_map)
ggplot(crimes_map, aes(x = long, y = lat, group = group)) +
geom_polygon()
ggplot(crimes_map, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "white", color = "black"))
ggplot(crimes_map, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "white", color = "black")
ggplot(states_map, aes(x = long, y = lat, group = group)) +
geom_polygon( fill = "white", color = "black")
ggplot(states_map, aes(x = long, y = lat, group = group)) +
geom_polygon( fill = "white", color = "black")
ggplot(crimes_map, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "white", color = "black")
ggplot(states_map, aes(x = long, y = lat, group = group)) +
geom_polygon( fill = "white", color = "black")
ggplot(crimes_map, aes(x = long, y = lat, group = group)) +
geom_polygon( fill = "white", color = "black")
ggplot(crimes_map, aes(x = long, y = lat)) +
geom_polygon(fill = "white", color = "black")
ggplot(crimes_map, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "white", color = "black")
glimpse(crimes_map)
ggplot(crimes_map, aes(x = long, y = lat, group = group, fill = Murder)) +
geom_polygon(fill = "white", color = "black")
ggplot(crimes_map, aes(x = long, y = lat, group = group, color = Murder)) +
geom_polygon(fill = "white", color = "black")
ggplot(crimes_map, aes(x = long, y = lat, group = group, color = group)) +
geom_polygon(fill = "white", color = "black")
ggplot(crimes_map, aes(x = long, y = lat, group = group, fill = murder)) +
geom_polygon(fill = "white", color = "black")
ggplot(crimes_map, aes(x = long, y = lat, group = group, fill = Murder)) +
geom_polygon(fill = "white", color = "black")
ggplot(crimes_map, aes(x = long, y = lat, group = group, fill = Murder)) +
geom_polygon( color = "black")
ggplot(crimes_map, aes(x = long, y = lat, group = group)) +
geom_polygon( color = "black")
ggplot(crimes_map, aes(x = long, y = lat, group = group, fill = Murder)) +
geom_polygon( color = "black")
ggplot(crimes_map, aes(x = long, y = lat, group = group, fill = Murder)) +
geom_polygon( color = "black") + scale_fill_gradient(low = "white", high = "blue")
ggplot(crimes_map, aes(x = long, y = lat, group = group, fill = Murder)) +
geom_polygon( color = "black") + scale_fill_gradient(low = "white", high = "red")
ggplot(crimes_map, aes(x = long, y = lat, group = group, fill = Murder)) +
geom_polygon( color = "black") + scale_fill_gradient(low = "white", high = "red")
ggplot(crimes_map, aes(x = long, y = lat, group = group, fill = Murder)) +
geom_polygon( color = "black") + scale_fill_gradient(low = "white", high = "red")
coord_map("polyconic")
ggplot(crimes_map, aes(x = long, y = lat, group = group, fill = Murder)) +
geom_polygon( color = "black") + scale_fill_gradient(low = "white", high = "red") +
coord_map("polyconic")
ggplot(crimes_map, aes(x = long, y = lat, group = group, fill = Murder)) +
geom_polygon( color = "black") + scale_fill_gradient(low = "white", high = "red")
ggplot(crimes_map, aes(x = long, y = lat, group = group, fill = Murder)) +
geom_polygon( color = "black") + scale_fill_gradient(low = "white", high = "red") +
coord_map("polyconic")
ggplot(crimes_map, aes(x = long, y = lat, group = group, fill = Murder)) +
geom_polygon( color = "black") + scale_fill_gradient(low = "white", high = "red") +
coord_map("polyconic") +
theme_void()
library(ggmap)
library(maps)
library(ggplot2)
library(dplyr)
USC = "University of Southern California Los Angeles"
USC_map = get_map(location = USC)
USC_map
ggmap(USC_map)
library(DBI)
library(RPostgreSQL)
library(dplyr)
install.packages("instaR")
library(instaR)
require(httr)
require(rjson)
library(instaR)
library(instaR)
require(httr)
require(rjson)
library(instaR)
library(RCurl)
library(instaR)
library(RCurl)
client_id = "3950715905f14cc29ca1e1cc241eee7d"
client_secret = "3160ec2d2bc2455f8b8b7792fddaf86c"
client_id = "3950715905f14cc29ca1e1cc241eee7d"
client_secret = "3160ec2d2bc2455f8b8b7792fddaf86c"
library(instaR)
library(RCurl)
library(instaR)
library(RCurl)
client_id = "3950715905f14cc29ca1e1cc241eee7d"
client_secret = "3160ec2d2bc2455f8b8b7792fddaf86c"
my_app_OAuth = instaOAuth(client_id,client_secret, scope = "follower_list" )
my_app_OAuth = instaOAuth(client_id,client_secret, scope = C("basic", "follower_list", "public_content","comments", "relationships", "likes")
library(instaR)
library(RCurl)
client_id = "3950715905f14cc29ca1e1cc241eee7d"
client_secret = "3160ec2d2bc2455f8b8b7792fddaf86c"
my_app_OAuth = instaOAuth(client_id,client_secret, scope = C("basic", "follower_list", "public_content","comments", "relationships", "likes")
my_access_token = my_app_OAuth$credentials$access_token
my_app_OAuth = instaOAuth(client_id,client_secret, scope = C("basic", "follower_list", "public_content","comments", "relationships", "likes")
my_app_OAuth = instaOAuth(client_id,client_secret, scope = C("basic", "follower_list", "public_content","comments", "relationships", "likes"))
my_app_OAuth = instaOAuth(client_id,client_secret, scope = C("basic", "follower_list", "public_content","comments", "relationships", "likes"))
client_id = "3950715905f14cc29ca1e1cc241eee7d"
client_secret = "3160ec2d2bc2455f8b8b7792fddaf86c"
my_app_OAuth = instaOAuth(client_id,client_secret, scope = C("basic", "follower_list", "public_content","comments", "relationships", "likes"))
library(instaR)
my_app_OAuth = instaOAuth(client_id,client_secret, scope = C("basic", "follower_list", "public_content","comments", "relationships", "likes"))
C("basic", "follower_list", "public_content","comments", "relationships", "likes")
C("basic", "follower_list", "public_content","comments", "relationships", "likes")
C("basic")
("basic")
C("basic", "follower_list")
C("basic", "follower_list")
C("basic", "follower_list", "public_content","comments", "relationships", "likes")
c(1,2,3)
c(1,"basic",3)
c(1,"basic","follower_list")
c("public_content","basic","follower_list")
C("basic", "follower_list")
C("basic", "follower_list")
c("basic", "follower_list"), "public_content","comments", "relationships", "likes")
c("basic", "follower_list"), "public_content","comments", "relationships", "likes")
c("basic", "follower_list", "public_content","comments", "relationships", "likes")
my_app_OAuth = instaOAuth(client_id,client_secret, scope = c("basic", "follower_list", "public_content","comments", "relationships", "likes"))
my_access_token = my_app_OAuth$credentials$access_token
my_app_OAuth = instaOAuth(client_id,client_secret, scope = c("basic", "follower_list", "public_content","comments", "relationships", "likes"))
my_access_token = my_app_OAuth$credentials$access_token
my_access_token = my_app_OAuth$credentials$access_token
my_access_token
my_access_token = my_app_OAuth$credentials$access_token
my_access_token
my_access_token
setwd("C:/Users/dan_9/Desktop/COURSERA + SELF STUDY/payoff") # directory of the folder in my laptop, should be different on your computer
## You can just load the file working.Rdata to skip the running process of data mining, data cleaning, and building model process
# load("working.Rdata")
# save.image("working.Rdata")
library(DBI)
library(RPostgreSQL)
library(dplyr)
library(lubridate)
library(stringr)
# To connect into amazon Web service
con =  dbConnect(PostgreSQL(), dbname = "intern",
host = "payoff-showtime.ctranyfsb6o1.us-east-1.rds.amazonaws.com", port = 5432,
user = "payoff_intern", password = 'reallysecure' )
library(DBI)
library(RPostgreSQL)
library(dplyr)
library(lubridate)
library(stringr)
con =  dbConnect(PostgreSQL(), dbname = "intern",
host = "payoff-showtime.ctranyfsb6o1.us-east-1.rds.amazonaws.com", port = 5432,
user = "payoff_intern", password = 'reallysecure' )
con =  dbConnect(PostgreSQL(), dbname = "intern",
host = "payoff-showtime.ctranyfsb6o1.us-east-1.rds.amazonaws.com", port = 5432,
user = "payoff_intern", password = 'reallysecure' )
library(DBI)
library(RPostgreSQL)
library(dplyr)
library(lubridate)
library(stringr)
con =  dbConnect(PostgreSQL(), dbname = "intern",
host = "payoff-showtime.ctranyfsb6o1.us-east-1.rds.amazonaws.com", port = 5432,
user = "payoff_intern", password = 'reallysecure' )
setwd("C:/Users/dan_9/Desktop/COURSERA + SELF STUDY/payoff") # directory of the folder in my laptop, should be different on your computer
load("working.Rdata")
glimpse(data)
View(data)
View(data)
View(data)
which(is.na(data$loan_amnt)) # 1 row is empty, and row number is 39787
library(MASS)
attach(Boston)
library(tree)
library(dplyr)
set.seed(1)
glimpse(Boston)
train = sample(1:nrow(Boston), nrow(Boston)/2)
test = -train
training_data = Boston[train,]
testing_data = Boston[test,]
testing_medv = medv[test]
tree_model = tree(medv~., training_data)
tree_model
summary(tree_model)
plot(tree_model) #producing the tree
text(tree_model, pretty = 0) # use "pretty" if we have categ var
tree_pred = predict(tree_model, testing_data)
mean((tree_pred - testing_medv)^2)
# cross validation for pruning the tree
cv_tree = cv.tree(tree_model)
plot(cv_tree$size,
cv_tree$dev, #the MSE
type = "b", # to connect the dot together
xlab = "Tree Size",
ylab = "MSE")
data$grade = as.factor(data$grade)
data$term = as.factor(data$term)
data$issue_d_year = as.factor(data$issue_d_year)
data$application_type = as.factor(data$application_type)
data$home_ownership = as.factor(data$home_ownership)
data$loan_status = as.factor(data$loan_status)
data$purpose = as.factor(data$purpose)
data$verification_status = as.factor(data$verification_status)
data = data %>% mutate(loan_status_code = ifelse(loan_status == "Default", 1, 0))
data_for_logist_reg = select(data, loan_status_code, funded_amnt_inv, installment,
int_rate_in_percent,total_acc,
dti, revol_bal, annual_inc, total_rec_late_fee,
grade, total_pymnt, total_pymnt_inv, total_rec_prncp, purpose,
mths_since_last_delinq,mths_since_last_major_derog,mths_since_last_record,
mths_since_rcnt_il,mths_since_recent_bc,mths_since_recent_bc_dlq,
mths_since_recent_inq,mths_since_recent_revol_delinq)
logistic_model = glm(loan_status_code ~ .,
data = training_data, family = binomial)
logistic_model
summary(logistic_model)
library(e1071)
set.seed(1)
x = matrix(rnorm(40), ncol = 2)
y = c(rep(-1,10), rep(1,10))
# first 10 elements of y are -1 and the rest are 1
x[y==1,] = x[y==1,] + 1 # we add 1 point to the last 10 rows of x
# lets check if the classes are linearly separable
plot(x)
plot(x, col =(3-y)) # col = 2 means y = 1, col = 4 means y = -1
# first 10 elements with y=-1 are going to be painted in red and the rest in blue
dat = data.frame(x=x, y = as.factor(y))
svmfit = svm(y~., data = dat, kernel = "linear", cost = 10, scale = FALSE)
par(mfrow =c(2,1))
plot(svmfit,dat)
plot(x, col =(3-y)) # col = 2 means y = 1, col = 4 means y = -1
# what are our support vectors?
svmfit$index # gives you the indeces of observation thats in support vector, denoted "x" in the plot
summary(svmfit)
# lets change the cost
svm.fit = svm(y~., data = dat, kernel = "linear", cost = .1, scale = FALSE)
summary(svm.fit)
plot(svm.fit,dat)
# lower costm wider margins
library(MASS)
attach(Boston)
library(tree)
library(dplyr)
set.seed(1)
library(gbm) # for boosting
glimpse(Boston)
train = sample(1:nrow(Boston), nrow(Boston)/2)
test = -train
training_data = Boston[train,]
testing_data = Boston[test,]
# and here's the model
testing_medv = medv[test]
# use distribution="gaussian" for regression problem
# use distribution="bernoulli" for binary classification problem
boost.boston = gbm(medv~., data = training_data,
distribution = "gaussian", n.trees = 5000,
interaction.depth = 4)
summary(boost.boston)
par(mfrow =c(1,2))
plot(boost.boston ,i="rm")
plot(boost.boston ,i="lstat")
boost_pred = predict(boost.boston,testing_data, n.trees = 5000)
mean((boost_pred - testing_medv)^2)
# [1] 11.8532
library(neuralnet)
library(grid)
library(MASS)
# library(dplyr)
# detach("package:dplyr", unload=TRUE)
infert
head(infert)
# the output = case
# ?neuralnet
nn = neuralnet(case ~age+parity+induced+spontaneous, data = infert,
hidden = 2, err.fct = "ce",
linear.output = F)
# hidden means hidden layer, generally can be 1,2,3. But typically 1 or 2
# err.fct means error functtion,"SSE"  = sum square error and "CE" = entorpy model
# linear.output = T for simple linear output, for classification, set this to F
plot(nn)
nn$weights
nn$result.matrix
nn$covariate # list of input to the neural system (age, parity, induced, spontaneous)
infert$case # the real output(not the predicction)
